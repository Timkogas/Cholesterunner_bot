const TelegramApi = require('node-telegram-bot-api')
const mongoose = require('mongoose');
require('dotenv').config();

mongoose.connect(process.env.DB_MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });

const userSchema = new mongoose.Schema({
  username: { type: String, required: true },
  id: { type: Number, required: true },
  phone: String,
});

const User = mongoose.model('User', userSchema);

const token = process.env.TOKEN
const bot = new TelegramApi(token, { polling: true })
const variants = {
  menu: 'menu',
  about: 'about',
  test: 'test',
  help: 'help',
  game: 'game'
}


const start = () => {
  bot.on('message', async (msg) => {
    const text = msg.text
    const chatId = msg.chat.id

    const existingUser = await User.findOne({ id: msg.from.id });

    if (!existingUser) {
      let newUser
      if (msg?.contact?.phone_number) {
        newUser = new User({
          username: msg.from.username,
          id: msg.from.id,
          phone: msg?.contact?.phone_number,
        });
      } else {
        newUser = new User({
          username: msg.from.username,
          id: msg.from.id,
        });
      }
      await newUser.save();
    } else {
      if (msg?.contact?.phone_number) {
        existingUser.phone = msg?.contact?.phone_number;
        await existingUser.save();
      }
    }

    try {
      if (text === '/start') {
        return await bot.sendMessage(chatId, `<b>–ë–ª—è—à–∫–∏ —É–∂–µ –∑–∞–∂–¥–∞–ª–∏—Å—å! üî•</b>\n\n–ó–∞—Ö–æ–¥–∏ –≤ –º–µ–Ω—é –∏ –∂–º–∏ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –∏–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ò–≥—Ä–∞—Ç—å', web_app: { url: 'https://cholesterunner.ru' } }],
              [{ text: '–û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: variants.about }, { text: '–¢–µ—Å—Ç', callback_data: variants.test }, { text: '–ü–æ–º–æ—á—å —Ñ–æ–Ω–¥—É', callback_data: variants.help }],
            ],
          }
        })
      }
      return await bot.sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
    } catch (e) {
      return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
    }
  })

  bot.on('callback_query', async function onCallbackQuery(callbackQuery) {
    const { data, message } = callbackQuery
    switch (data) {
      case variants.menu:
        await bot.sendMessage(message.chat.id, `<b>–ë–ª—è—à–∫–∏ —É–∂–µ –∑–∞–∂–¥–∞–ª–∏—Å—å! üî•</b>\n\n–ó–∞—Ö–æ–¥–∏ –≤ –º–µ–Ω—é –∏ –∂–º–∏ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –∏–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.`, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ò–≥—Ä–∞—Ç—å', web_app: { url: 'https://cholesterunner.ru' } }],
              [{ text: '–û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: variants.about }, { text: '–¢–µ—Å—Ç', callback_data: variants.test }, { text: '–ü–æ–º–æ—á—å —Ñ–æ–Ω–¥—É', callback_data: variants.help }],
            ],
          }
        })
        break;
      case variants.about:
        await bot.sendMessage(message.chat.id, `–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Ñ–æ–Ω–¥–æ–º –±–æ—Ä—å–±—ã —Å –∏–Ω—Å—É–ª—å—Ç–æ–º –û–†–ë–ò, —á—Ç–æ–±—ã –≤ —Å–º–µ—à–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –ø–ª–æ—Ö–æ–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏–Ω—Å—É–ª—å—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ —Ñ–æ–Ω–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –±–æ–ª—å—à–µ –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Ä–∏—Å–∫–∏! <b><a href='https://www.youtube.com/watch?v=dQw4w9WgXcQ/'> –°—Å—ã–ª–∫–∞ </a></b>`, {
          disable_web_page_preview: true,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: variants.menu }],
            ],
          }
        })
        break;
      case variants.test:
        await bot.sendMessage(message.chat.id, `–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à —Ä–∏—Å–∫ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—É–ª—å—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø–æ <b><a href='https://orbifond.ru/cholesterunner/'>—Å—Å—ã–ª–∫–µ</a></b>.`, {
          disable_web_page_preview: true,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: variants.menu }],
            ],
          }
        })
        break;
      case variants.help:
        await bot.sendMessage(message.chat.id, `–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏–≥—Ä–∞ –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ–Ω–¥, —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏ ‚Äì —Ä–∞–∑–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ <b><a href='https://orbifond.ru/kak-pomoch/'>—Å–∞–π—Ç</a></b> –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±.`, {
          disable_web_page_preview: true,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: variants.menu }],
            ],
          }
        })
        break;
    }
  });
}


start()